BCRMatch - version 0.1-beta
========================

Introduction
------------
BCRMatch is a tool that accepts sequences of CDR loops of antibodies, and uses the pre-trained machine learning models developed in this study to predict which antibodies recognize the same epitope.

Note: Please contact us at help@iedb.org if you wish to use antibody structure, in addition to sequence, for making predictions.

Prerequisites:
-------------

+ Docker (for running in containerized environment)
  * https://www.docker.com/

+ Python 3.9 or higher
  * http://www.python.org/

+ Required Python packages:
  * numpy
  * pandas
  * scikit-learn
  * xgboost
  * tensorflow
  * torch

+ Dependency tool:
  * TCRMatch 
    * https://github.com/IEDB/TCRMatch


Installation:
------------
1. Prebuilt docker image (highly recommended)
Pull the image from public registry and tag it locally as `bcrmatch`:
> docker pull harbor.lji.org/iedb-public/bcrmatch:latest
> docker tag harbor.lji.org/iedb-public/bcrmatch:latest bcrmatch


2. Docker build (recommended)
To build an image from `Dockerfile`:
> docker build -t bcrmatch .

* Run basic example on BCRMatch
> docker run --rm bcrmatch python3 run_bcrmatch.py -i ./examples/example.tsv -tn abpairs_abligity

3. Local installation
Install requirements:
> pip install -r requirements.txt

Set environment variable to TCRMatch path:
> export TCRMATCH_PATH=/path/to/tcrmatch_dir

Download pre-trained datasets (optional, but recommended)
Run the script "dataset-download.sh" to download the most up-to-date pre-trained datasets from the IEDB servers:
> sh dataset-download.sh


Usage:
------
To perform a prediction, CDRLs and CDRHs are required along with a dataset name.

Use help flag to inspect available parameters:
> python run_bcmatch.py --help

Run a simple prediction:
> python run_bcrmatch.py -i examples/set-a/example.tsv -tn abpairs_abligity

Run with individual fasta files (3 CDRH FASTA files and 3 CDRL FASTA files):
> python run_bcrmatch.py -ch examples/set-a/cdrh1_input.fasta examples/set-a/cdrh2_input.fasta examples/set-a/cdrh3_input.fasta -cl examples/set-a/cdrl1_input.fasta examples/set-a/cdrl2_input.fasta examples/set-a/cdrl3_input.fasta -tn abpairs_abligity

Result can be saved to an output file by setting the '-o' flag (only CSV or TSV allowed).
> python run_bcrmatch.py -i examples/set-a/example.tsv -tn abpairs_abligity -o output_file.csv

List available datasets:
> python run_bcrmatch.py --list-datasets


Training:
--------
This step is only necessary if you have a custom dataset upon which to train. Otherwise, it is recommended to download the pre-trained models from the IEDB.

Users can specify the dataset that the classifiers can be trained on. If the user provides the path to the dataset, all 5 classifiers (rf, gnb, log_reg, xgb, and ffnn) will be trained and stored under the modules folder.

Use help command to view all available arguments:
> python run_bcrmatch.py --help

Example on training classifiers with Ab-Ligity dataset:
> python run_bcrmatch.py -tm -tc path/to/abpairs_abligity.csv -tv 20240916

The above code will save the classifier as a pickle file to models/<dataset_name>/<dataset_version>/<classifier>_<dataset_name>.pkl.

Forced training:
BCRMatch will not train same dataset by default. However, this can be overriden by using the --force-training/-f flag:
> python run_bcrmatch.py -tm -tc datasets/abpairs_abligity.csv -tv 20240916 -f


ANARCI:
-------
NOTE: ANARCI functionality is only available through Docker containers due to Python package incompatibility issues. Local installation is not supported.

To use ANARCI functionality for processing full heavy and light chain sequences:

1. Prebuilt docker image
> docker pull harbor.lji.org/iedb-public/bcrmatch-anarci:latest
> docker tag harbor.lji.org/iedb-public/bcrmatch-anarci:latest bcrmatch-anarci

2. Build the ANARCI container:
> docker build -t bcrmatch-anarci -f anarci.Dockerfile .

3. Inside the container, run BCRMatch with your full chain sequences:
> docker run -it bcrmatch-anarci /bin/bash
> python run_bcrmatch.py -fh examples/set-c/updated_example_vh_seqs.fasta -fl examples/set-c/updated_example_vl_seqs.fasta -tn abpairs_abligity